<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace DwollaSwagger\models;

use \ArrayAccess;
use DwollaSwagger\interfaces\ModelInterface;

class CreateCustomer implements ArrayAccess, ModelInterface {
  static $swaggerTypes = array(
      'first_name' => 'string',
      'last_name' => 'string',
      'email' => 'string',
      'ip_address' => 'string',
      'type' => 'string',
      'address1' => 'string',
      'address2' => 'string',
      'city' => 'string',
      'state' => 'string',
      'postal_code' => 'string',
      'date_of_birth' => 'string',
      'ssn' => 'string',
      'phone' => 'string',
      'business_name' => 'string',
      'business_type' => 'string',
      'business_classification' => 'string',
      'ein' => 'string',
      'doing_business_as' => 'string',
      'website' => 'string',
      'controller' => 'object'
  );

  static $attributeMap = array(
      'first_name' => 'firstName',
      'last_name' => 'lastName',
      'email' => 'email',
      'ip_address' => 'ipAddress',
      'type' => 'type',
      'address1' => 'address1',
      'address2' => 'address2',
      'city' => 'city',
      'state' => 'state',
      'postal_code' => 'postalCode',
      'date_of_birth' => 'dateOfBirth',
      'ssn' => 'ssn',
      'phone' => 'phone',
      'business_name' => 'businessName',
      'business_type' => 'businessType',
      'business_classification' => 'businessClassification',
      'ein' => 'ein',
      'doing_business_as' => 'doingBusinessAs',
      'website' => 'website',
      'controller' => 'controller'
  );


  public $first_name; /* string */
  public $last_name; /* string */
  public $email; /* string */
  public $ip_address; /* string */
  public $type; /* string */
  public $address1; /* string */
  public $address2; /* string */
  public $city; /* string */
  public $state; /* string */
  public $postal_code; /* string */
  public $date_of_birth; /* string */
  public $ssn; /* string */
  public $phone; /* string */
  public $business_name; /* string */
  public $business_type; /* string */
  public $business_classification; /* string */
  public $ein; /* string */
  public $doing_business_as; /* string */
  public $website; /* string */
  public $controller; /* object */

  public function __construct(array $data = null) {
    $this->first_name = $data["first_name"];
    $this->last_name = $data["last_name"];
    $this->email = $data["email"];
    $this->ip_address = $data["ip_address"];
    $this->type = $data["type"];
    $this->address1 = $data["address1"];
    $this->address2 = $data["address2"];
    $this->city = $data["city"];
    $this->state = $data["state"];
    $this->postal_code = $data["postal_code"];
    $this->date_of_birth = $data["date_of_birth"];
    $this->ssn = $data["ssn"];
    $this->phone = $data["phone"];
    $this->business_name = $data["business_name"];
    $this->business_type = $data["business_type"];
    $this->business_classification = $data["business_classification"];
    $this->ein = $data["ein"];
    $this->doing_business_as = $data["doing_business_as"];
    $this->website = $data["website"];
    $this->controller = $data["controller"];
  }

  /**
   * @return array static $swaggerTypes swagger types
   */
  public static function getSwaggerTypes()
  {
    return self::$swaggerTypes;
  }

  /**
   * @return array static $attributeMap attribute map
   */
  public static function getAttributeMap()
  {
    return self::$attributeMap;
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
